[{"content":"A compact, practical Docker command reference for everyday container work — copy commands and adapt them to your setup.\nQuick setup Install Docker Desktop (Windows/macOS) or Docker Engine (Linux). Verify:\ndocker --version docker info Images Search, pull, list, remove:\ndocker search nginx docker pull nginx:latest docker images # list local images docker rmi image:tag # remove image Build an image from a Dockerfile:\ndocker build -t myapp:1.0 . docker build --no-cache -t myapp:latest . Tag \u0026amp; push:\ndocker tag myapp:1.0 myrepo/myapp:1.0 docker push myrepo/myapp:1.0 Containers Run, list, inspect, stop, remove:\ndocker run --name web -d -p 8080:80 nginx:latest docker ps # running containers docker ps -a # all containers docker logs -f web docker exec -it web /bin/sh docker stop web docker rm web Run with volumes \u0026amp; env:\ndocker run -d --name db -e POSTGRES_PASSWORD=secret -v db_data:/var/lib/postgresql/data postgres:15 Detach mode vs foreground:\nForeground: omit -d Attach later: docker attach Dockerfile essentials Minimal example:\n# Dockerfile FROM node:18-alpine WORKDIR /app COPY package*.json ./ RUN npm ci --production COPY . . CMD [\u0026#34;node\u0026#34;,\u0026#34;server.js\u0026#34;] EXPOSE 3000 Best practices:\nUse small base images (alpine/distroless) Leverage multi-stage builds for artifacts Pin major versions for reproducible builds Minimize layers and files copied Docker Compose (v2+) Compose file (docker-compose.yml):\nversion: \u0026#34;3.9\u0026#34; services: web: build: . ports: - \u0026#34;8080:3000\u0026#34; volumes: - ./:/app environment: - NODE_ENV=development db: image: postgres:15 environment: - POSTGRES_PASSWORD=secret volumes: - db_data:/var/lib/postgresql/data volumes: db_data: Useful commands:\ndocker compose up --build docker compose up -d docker compose ps docker compose logs -f docker compose down --volumes Cleanup \u0026amp; disk space List dangling images and prune:\ndocker images -f dangling=true docker system prune # careful: removes stopped containers, networks, dangling images docker system prune -a # also removes unused images docker volume ls docker volume rm \u0026lt;name\u0026gt; Check disk usage:\ndocker system df Debugging \u0026amp; networking Inspect container details:\ndocker inspect \u0026lt;container\u0026gt; docker network ls docker network inspect bridge docker exec -it \u0026lt;container\u0026gt; /bin/sh Port forwarding: map host:container with -p HOST:CONTAINER.\nSecurity \u0026amp; permissions Avoid running processes as root inside containers. Minimize secret exposure; use environment variables or secret managers. Scan images with tools (Docker scan / trivy). Quick aliases \u0026amp; tips Start a shell in a one-off container: docker run \u0026ndash;rm -it -v \u0026ldquo;$(pwd)\u0026rdquo;:/work -w /work node:18 bash Rebuild \u0026amp; restart: docker compose up \u0026ndash;build -d View combined logs: docker compose logs -f Helpful resources Official docs: https://docs.docker.com/ Dockerfile best practices: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ That\u0026rsquo;s it — keep this post handy for quick Docker commands.\n","permalink":"http://localhost:1313/posts/docker/","summary":"\u003cp\u003eA compact, practical Docker command reference for everyday container work — copy commands and adapt them to your setup.\u003c/p\u003e","title":"Docker Command Cheatsheet"},{"content":"A compact, practical Git command reference for daily use — copy commands and adapt them to your repo. Use this as a quick cheat-sheet.\nSetup \u0026amp; identity git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;you@example.com\u0026#34; git config --global core.editor \u0026#34;code --wait\u0026#34; Create \u0026amp; clone git init # create a repo git clone \u0026lt;url\u0026gt; # clone remote repo Basic workflow git status # show changes git add \u0026lt;file\u0026gt; # stage a file git add . # stage all changes git commit -m \u0026#34;message\u0026#34; # commit staged changes git push origin main # push to remote branch git pull --rebase # update local branch with remote changes (rebase) Branching git branch # list local branches git branch \u0026lt;name\u0026gt; # create branch git checkout \u0026lt;name\u0026gt; # switch branch git switch -c \u0026lt;name\u0026gt; # create + switch (modern) git merge \u0026lt;branch\u0026gt; # merge branch into current git rebase \u0026lt;branch\u0026gt; # rebase current onto branch Inspecting history \u0026amp; diffs git log --oneline --graph --decorate --all git log -p \u0026lt;file\u0026gt; # show commits \u0026amp; diffs for file git diff # unstaged changes git diff --staged # staged vs HEAD Undo \u0026amp; fix mistakes git restore \u0026lt;file\u0026gt; # discard working-dir changes (modern) git restore --staged \u0026lt;file\u0026gt; # unstage file git checkout -- \u0026lt;file\u0026gt; # older form to discard git reset --soft HEAD~1 # undo last commit, keep changes staged git reset --mixed HEAD~1 # undo last commit, keep changes unstaged git revert \u0026lt;commit\u0026gt; # create a commit that undoes another commit Working with remotes git remote -v git remote add origin \u0026lt;url\u0026gt; git fetch origin git pull origin main git push -u origin feature/xyz # push and set upstream git push --delete origin \u0026lt;branch\u0026gt; # delete remote branch Stashing git stash # save working state git stash pop # restore and remove stash git stash list git stash apply stash@{1} # apply specific stash Cherry-pick \u0026amp; selective changes git cherry-pick \u0026lt;commit\u0026gt; # apply a commit from another branch git add -p # interactively stage hunks Useful aliases (add to ~/.gitconfig) [alias] st = status co = checkout br = branch lg = log --oneline --graph --decorate --all amend = commit --amend --no-edit Tips Use git status often. Prefer feature branches: feature/* or fix/*. Use git pull --rebase to keep history linear when collaborating. Use git log --graph --oneline to visualize history. Back up important work before using destructive commands (reset --hard, etc.). That\u0026rsquo;s it — save this post for quick reference and extend it with commands you use most.\n","permalink":"http://localhost:1313/posts/git/","summary":"\u003cp\u003eA compact, practical Git command reference for daily use — copy commands and adapt them to your repo. Use this as a quick cheat-sheet.\u003c/p\u003e","title":"Git Command Cheatsheet"},{"content":"A compact Linux command reference for daily terminal work — copy commands and adapt them to your environment.\nFiles \u0026amp; directories ls -la # list files with details cd /path/to/dir # change directory pwd # print working directory mkdir -p dir/subdir # create directories cp -r src dest # copy files/directories mv old new # move/rename rm file # remove file rm -rf dir # remove directory (dangerous) Viewing file contents cat file tac file # reverse cat less file # pager (q to quit) head -n 50 file tail -n 100 file tail -f /var/log/syslog # follow log Searching \u0026amp; text processing grep -R --line-number \u0026#34;pattern\u0026#34; . grep -i \u0026#34;pattern\u0026#34; file # case-insensitive awk \u0026#39;{print $1,$3}\u0026#39; file sed -n \u0026#39;1,50p\u0026#39; file cut -d\u0026#39;,\u0026#39; -f1 file sort file | uniq -c | sort -rn xargs -0 \u0026lt; list.txt command File find \u0026amp; permissions find /path -type f -name \u0026#34;*.log\u0026#34; find . -mtime -7 # modified within 7 days stat file # file metadata chmod 644 file # set permissions chown user:group file # change owner Processes \u0026amp; system info ps aux | grep myproc pgrep -f process_name top # interactive process viewer htop # improved top (if installed) kill \u0026lt;pid\u0026gt; kill -9 \u0026lt;pid\u0026gt; # force kill nice -n 10 command # set priority renice -n -5 \u0026lt;pid\u0026gt; Networking ip addr show ss -tulpen # sockets (recommended over netstat) curl -I https://example.com curl -fsSL https://example.com | bash # careful with piped scripts ping -c 4 8.8.8.8 traceroute example.com dig +short example.com Package managers (examples) # Debian/Ubuntu (apt) sudo apt update sudo apt install -y package # RHEL/CentOS (dnf/yum) sudo dnf install package # Arch (pacman) sudo pacman -Syu package Services \u0026amp; boot systemctl status nginx.service sudo systemctl start|stop|restart nginx sudo systemctl enable nginx journalctl -u nginx -f journalctl -b --since \u0026#34;2 hours ago\u0026#34; Disks \u0026amp; mount df -h # disk usage du -sh ./path # directory size lsblk # block devices mount /dev/sdb1 /mnt/data umount /mnt/data SSH \u0026amp; remote ssh user@host ssh -i ~/.ssh/key user@host scp file user@host:/path rsync -avz ./dir/ user@host:/path ssh-copy-id user@host Containers \u0026amp; virtualization (quick) docker ps docker logs -f container podman ps virsh list --all Shell \u0026amp; productivity tips # quick file editing nano file code file # VS Code from terminal # history and re-run history | grep deploy !123 # run history item 123 !! # repeat last command # useful aliases (add to ~/.bashrc or ~/.zshrc) alias ll=\u0026#39;ls -la\u0026#39; alias gs=\u0026#39;git status\u0026#39; Safety \u0026amp; debugging Use sudo only when necessary. Preview destructive commands with echo or \u0026ndash;dry-run (when available). Redirect stderr to a file for debugging: command 2\u0026gt;errors.log Use shellcheck for shell script linting. Quick checklist before executing scripts from the web Inspect the script Run in a safe environment or container Check required privileges and side effects That\u0026rsquo;s it — keep this post as a quick Linux CLI reference and extend with distro-specific notes as needed.\n","permalink":"http://localhost:1313/posts/linux/","summary":"\u003cp\u003eA compact Linux command reference for daily terminal work — copy commands and adapt them to your environment.\u003c/p\u003e","title":"Linux Command Cheatsheet"},{"content":"How to use Markdown on this blog This post is a short, practical guide to writing Markdown for this Hugo + PaperMod blog. Use it as a quick reference.\nBasic text Headings: use # through ###### Example: ## Heading level 2 Emphasis: *italic* or **bold** Inline code: surround with backticks: `inline()` Paragraphs: separate with a blank line Lists Unordered:\nItem one Item two Ordered:\nFirst Second Nesting:\nParent Child Links and images Link: [Hugo](https://gohugo.io/)\nImage (Markdown): ![alt text](/images/photo.jpg \u0026quot;Title\u0026quot;)\nPaperMod / Hugo shortcode image (preferred for resizing \u0026amp; captions):\nCaption\rCode blocks and syntax highlighting Use fenced code blocks with the language for syntax highlighting:\n// example.go package main func main() { println(\u0026#34;Hello, Hugo\u0026#34;) } Blockquotes and horizontal rules This is a blockquote.\nHorizontal rule:\nTables Feature Supported Headings Yes Code Yes Hugo-specific tips Front matter controls title, date, draft, tags, slug, and more. Use the summary separator \u0026lt;!--more--\u0026gt; to set the teaser shown on listing pages. Use shortcodes for richer content (figures, videos, embeds). For custom attributes (IDs/classes) enable and use Goldmark extensions in config if needed. Example front matter fields commonly used here:\n--- title: \u0026#34;Post title\u0026#34; date: 2025-10-17T17:11:08+02:00 draft: false tags: [\u0026#34;Markdown\u0026#34;,\u0026#34;Tips\u0026#34;] --- PaperMod-specific notes Add hero or image in front matter if you want a header image (check theme docs). PaperMod shows reading time and tags automatically when front matter is set correctly. Good practices Keep posts small and focused. Use fenced code blocks with language names for consistent syntax highlighting. Add alt text for accessibility on images. Preview locally with hugo server before publishing: Open a terminal in the project root and run: hugo server -D Visit http://localhost:1313 Quick checklist before publish Title and date set draft: false Tags added Summary (use \u0026lt;!--more--\u0026gt;) validated Images have alt text That\u0026rsquo;s it — use this as your cheat-sheet when writing posts in this repository.\n","permalink":"http://localhost:1313/posts/markdown_notes/","summary":"\u003ch2 id=\"how-to-use-markdown-on-this-blog\"\u003eHow to use Markdown on this blog\u003c/h2\u003e\n\u003cp\u003eThis post is a short, practical guide to writing Markdown for this Hugo + PaperMod blog. Use it as a quick reference.\u003c/p\u003e","title":"Markdown"},{"content":"A compact Postgres command \u0026amp; workflow cheat‑sheet for daily database tasks. Copy commands and adapt them to your environment.\nQuick start Run locally with Docker (Windows PowerShell):\ndocker run --name pg -e POSTGRES_PASSWORD=secret -p 5432:5432 -d postgres:15 # connect with psql from host (psql must be installed) psql \u0026#34;host=localhost port=5432 user=postgres dbname=postgres password=secret\u0026#34; Install reference:\nOfficial downloads: https://www.postgresql.org/download/ psql basics Connect:\npsql -h host -p 5432 -U user -d dbname Common interactive commands:\n\\l — list databases \\c dbname — connect to database \\dt — list tables \\d+ table — describe table \\du — list roles \\conninfo — show current connection \\q — quit Create / manage DBs \u0026amp; users -- create role and DB CREATE ROLE deployer WITH LOGIN PASSWORD \u0026#39;s3cret\u0026#39;; CREATE DATABASE myapp OWNER deployer; -- grant permissions GRANT CONNECT ON DATABASE myapp TO deployer; GRANT USAGE ON SCHEMA public TO deployer; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO deployer; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO deployer; Backup \u0026amp; restore Logical backup (single DB):\npg_dump -h host -U user -Fc -f mydb.dump mydb\rpg_restore -h host -U user -d mydb_restored mydb.dump Plain SQL:\npg_dump -h host -U user -f mydb.sql mydb\rpsql -h host -U user -d mydb_restored -f mydb.sql All clusters:\npg_dumpall -h host -U postgres -f all.sql Common maintenance Vacuum \u0026amp; analyze:\nVACUUM (VERBOSE, ANALYZE);\rVACUUM FULL; -- more invasive, exclusive locks\rANALYZE; -- update planner statistics Reindex:\nREINDEX DATABASE mydb; Show long-running queries:\nSELECT pid, now()-pg_stat_activity.query_start AS duration, query, state FROM pg_stat_activity WHERE state \u0026lt;\u0026gt; \u0026#39;idle\u0026#39; ORDER BY duration DESC; Performance \u0026amp; introspection Explain \u0026amp; run:\nEXPLAIN ANALYZE SELECT * FROM users WHERE id = 1; DB size:\nSELECT pg_size_pretty(pg_database_size(\u0026#39;mydb\u0026#39;)); SELECT pg_size_pretty(pg_total_relation_size(\u0026#39;schema.table\u0026#39;)); Index usage and bloat hints:\n-- list index usage stats SELECT relname, seq_scan, idx_scan FROM pg_stat_user_tables; Connection \u0026amp; auth tips Example libpq connection string:\npostgres://user:pass@host:5432/dbname?sslmode=disable Edit authentication in pg_hba.conf and reload:\nsudo systemctl reload postgresql # Linux systemd\rnet stop postgresql-x64-XX # Windows (service name varies)\rnet start postgresql-x64-XX Docker / Compose snippet # docker-compose.yml version: \u0026#34;3.9\u0026#34; services: db: image: postgres:15 environment: POSTGRES_USER: postgres POSTGRES_PASSWORD: secret POSTGRES_DB: mydb ports: - \u0026#34;5432:5432\u0026#34; volumes: - db_data:/var/lib/postgresql/data volumes: db_data: Useful troubleshooting commands View logs:\ndocker logs -f pg\rjournalctl -u postgresql --since \u0026#34;1 hour ago\u0026#34;\rtail -n 200 /var/log/postgresql/postgresql-15-main.log Check active connections:\nSELECT datname, count(*) FROM pg_stat_activity GROUP BY datname; Extensions \u0026amp; extras Install/use Postgres extensions:\nCREATE EXTENSION IF NOT EXISTS pg_trgm; CREATE EXTENSION IF NOT EXISTS pg_stat_statements; Track slow queries:\n-- enable pg_stat_statements in postgresql.conf (shared_preload_libraries) then:\rSELECT * FROM pg_stat_statements ORDER BY total_time DESC LIMIT 10; Quick tips Prefer role-per-database principle; avoid superuser for apps. Keep regular backups and test restores. Use EXPLAIN ANALYZE before adding indexes. Run VACUUM/ANALYZE regularly or enable autovacuum. Secure credentials: use environment variables or secret stores. That\u0026rsquo;s it — save this post as your Postgres daily reference and extend with project‑specific commands.\n","permalink":"http://localhost:1313/posts/postgres/","summary":"\u003cp\u003eA compact Postgres command \u0026amp; workflow cheat‑sheet for daily database tasks. Copy commands and adapt them to your environment.\u003c/p\u003e","title":"Postgres Command Cheatsheet"},{"content":"A concise, practical guide to the SOLID object-oriented design principles with short examples you can copy and adapt.\nOverview SOLID is an acronym for five design principles that help produce maintainable, testable and extensible code:\nSingle Responsibility Principle (SRP) Open/Closed Principle (OCP) Liskov Substitution Principle (LSP) Interface Segregation Principle (ISP) Dependency Inversion Principle (DIP) Below are short explanations and compact TypeScript examples.\n1. Single Responsibility Principle (SRP) Each module/class should have one reason to change.\nTypeScript example — separate concerns for data and presentation:\n// SRP: separate fetching from rendering class UserRepository { async fetchUser(id: string) { /* fetch from API / DB */ } } class UserPresenter { render(user: any) { /* format \u0026amp; output */ } } // Usage const repo = new UserRepository(); const presenter = new UserPresenter(); const user = await repo.fetchUser(\u0026#34;u1\u0026#34;); presenter.render(user); Benefit: changes to fetching logic don\u0026rsquo;t affect rendering code.\n2. Open/Closed Principle (OCP) Software entities should be open for extension but closed for modification.\nTypeScript example — use polymorphism to extend behavior:\ninterface DiscountStrategy { calculate(amount: number): number } class NoDiscount implements DiscountStrategy { calculate(a: number) { return a } } class SeasonalDiscount implements DiscountStrategy { calculate(a: number) { return a * 0.9 } } class Checkout { constructor(private strategy: DiscountStrategy) {} total(amount: number) { return this.strategy.calculate(amount) } } To add a new discount, implement DiscountStrategy — no changes to Checkout required.\n3. Liskov Substitution Principle (LSP) Subtypes must be substitutable for their base types without altering correctness.\nBad example (violates LSP):\nclass Rectangle { setWidth(w: number) {}; setHeight(h: number) {} } class Square extends Rectangle { setWidth(w: number) { /* forces height = w */ } setHeight(h: number) { /* forces width = h */ } } // Client expecting independent width/height breaks when given a Square Better: use separate abstractions or immutable value objects instead of inheritance.\n4. Interface Segregation Principle (ISP) Clients should not be forced to depend on interfaces they do not use — prefer small, focused interfaces.\nTypeScript example:\ninterface Printer { print(doc: string): void } interface Scanner { scan(): string } class AllInOne implements Printer, Scanner { print(d: string) { /* ... */ } scan() { return \u0026#34;...\u0026#34; } } class SimplePrinter implements Printer { print(d: string) { /* ... */ } } Clients that only need printing depend only on Printer, not scanner methods.\n5. Dependency Inversion Principle (DIP) High-level modules should not depend on low-level modules; both should depend on abstractions.\nTypeScript example — inject abstraction:\ninterface Logger { log(msg: string): void } class ConsoleLogger implements Logger { log(m: string) { console.log(m) } } class FileLogger implements Logger { log(m: string) { /* write to file */ } } class OrderService { constructor(private logger: Logger) {} placeOrder(o: any) { // process order... this.logger.log(\u0026#34;order placed\u0026#34;) } } // Usage: inject desired logger implementation const svc = new OrderService(new ConsoleLogger()) This makes OrderService independent from concrete logging implementations and easier to test.\nQuick checklist when applying SOLID SRP: can each class be described with one responsibility? OCP: can you add new behavior without modifying existing code? LSP: can a subclass replace its parent without surprises? ISP: are interfaces small and focused for their clients? DIP: do high-level modules depend on abstractions (not concrete classes)? Further reading: Robert C. Martin\u0026rsquo;s writings and practical refactorings on each principle.\nThat\u0026rsquo;s it — use these patterns as guidelines, not rigid rules; prefer simplicity and refactor when the code signals need.\n","permalink":"http://localhost:1313/posts/solid/","summary":"\u003cp\u003eA concise, practical guide to the SOLID object-oriented design principles with short examples you can copy and adapt.\u003c/p\u003e","title":"SOLID Principles — Practical Examples"},{"content":"\nHello — welcome to this blog.\nI write short, practical posts about building things on the web: static sites, developer tooling, deployment tips, and configuration notes. This site is built with Hugo and the PaperMod theme.\nWhat you\u0026rsquo;ll find here\nConcise how‑tos and cheat‑sheets Code snippets and configuration examples Project retrospectives and lessons learned Quick reference posts for daily workflows How to use the blog\nBrowse posts from the home page or tags Preview locally with: hugo server -D Pull requests and suggestions are welcome — treat the repository as the single source of truth If you\u0026rsquo;re here to learn fast:\nStart with a tag that interests you (e.g., \u0026ldquo;Markdown\u0026rdquo;, \u0026ldquo;Hugo\u0026rdquo;, \u0026ldquo;DevOps\u0026rdquo;). Use the summary preview to scan posts quickly. Clone the repo and try examples locally. Quick links\nHome: / Posts: /posts/ Repository: (link to repo if available) Thanks for stopping by — read, try, and contribute.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003e\u003cimg alt=\"Cover image\" loading=\"lazy\" src=\"/images/cover.png\"\u003e\u003c/p\u003e\n\u003cp\u003eHello — welcome to this blog.\u003c/p\u003e\n\u003cp\u003eI write short, practical posts about building things on the web: static sites, developer tooling, deployment tips, and configuration notes. This site is built with \u003cstrong\u003eHugo\u003c/strong\u003e and the \u003cstrong\u003ePaperMod\u003c/strong\u003e theme.\u003c/p\u003e\n\u003cp\u003eWhat you\u0026rsquo;ll find here\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConcise how‑tos and cheat‑sheets\u003c/li\u003e\n\u003cli\u003eCode snippets and configuration examples\u003c/li\u003e\n\u003cli\u003eProject retrospectives and lessons learned\u003c/li\u003e\n\u003cli\u003eQuick reference posts for daily workflows\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHow to use the blog\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBrowse posts from the home page or tags\u003c/li\u003e\n\u003cli\u003ePreview locally with: \u003ccode\u003ehugo server -D\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ePull requests and suggestions are welcome — treat the repository as the single source of truth\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you\u0026rsquo;re here to learn fast:\u003c/p\u003e","title":"About"}]